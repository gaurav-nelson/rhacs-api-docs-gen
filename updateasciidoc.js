const fs = require("fs");
const path = require("path");

// Function to capitalize the first letter of a string
const capitalizeFirstLetter = (string) => {
  return string.charAt(0).toUpperCase() + string.slice(1);
};

// Function to update the AsciiDoc file
const updateAsciiDoc = (filePath) => {
  // Read the file
  fs.readFile(filePath, "utf8", (err, data) => {
    if (err) {
      console.error(`Error reading file: ${err}`);
      return;
    }

    // Split the content into lines
    const lines = data.split("\n");
    const updatedLines = [];
    let skipLines = true;
    let nextHeadingIsMainHeading = false;
    let capturedTitle = false;
    let documentTitle = "";

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();

      // Skip lines until we find '== Endpoints'
      if (skipLines) {
        if (line === "== Endpoints") {
          skipLines = false;
          continue; // Skip this line
        }
        continue; // Skip all lines before '== Endpoints'
      }

      // Skip lines with comments
      if (line.startsWith("//")) {
        continue; // Skip this line
      }

      // Stop processing when we encounter '[#models]'
      if (line.startsWith("[#models]")) {
        updatedLines.push('[id="common-object-reference"]');
        updatedLines.push("== Common object reference");
        updatedLines.push("");
        for (let j = i + 2; j < lines.length; j++) {
          updatedLines.push(lines[j]);
        }
        break;
      }

      // Add the auto-generated comment and content type at the beginning
      if (updatedLines.length === 0) {
        updatedLines.push("// Auto-generated by scripts. Do not edit.");
        updatedLines.push(":_mod-docs-content-type: ASSEMBLY");
        updatedLines.push("");
        nextHeadingIsMainHeading = true;
      }

      // Capitalize the first letter of lines starting with '[.'
      if (line.startsWith("[.")) {
        const updatedLine = line.slice(2, -1).trim(); // Remove '[.' and trim spaces, then remove last character
        updatedLines.push(
          `[id="${capitalizeFirstLetter(updatedLine)}"]`
        ); // Format as [id="..."]
        continue;
      }

      // If line starts with '=', check the number of '=' signs
      if (line.startsWith("=")) {
        if (!capturedTitle) {
          capturedTitle = true;
          //remove all spaces and `=` signs from the line
          documentTitle = line.replace(/[ =]/g, "");
        }
        const equalCount = line.match(/^=+/)[0].length; // Count leading '=' signs
        if (equalCount > 2) {
          // Check if there are more than 2 '=' signs
          // Remove 2 '=' signs and trim spaces
          let updatedLine = line.slice(2).trim(); // Remove the first two '=' signs

          // Use regex to match the first word character after '== '
          updatedLine = updatedLine.replace(/(?:==\s)(\w)/, (match, p1) => {
            return `== ${p1.toUpperCase()}`; // Capitalize the first word character
          });

          //Remove document title from the line
          const newLine = updatedLine.replace(documentTitle, "").trim();
          if (newLine.length > 1) {
            updatedLine = newLine;
          }

          updatedLines.push(updatedLine); // Add the updated line

          if (nextHeadingIsMainHeading) {
            updatedLines.push("");
            updatedLines.push(":toc: macro");
            updatedLines.push(":toc-title:");
            updatedLines.push("");
            updatedLines.push("toc::[]");
            updatedLines.push("");
            nextHeadingIsMainHeading = false;
          }
          continue;
        } else if (equalCount === 2) {
          // If there are exactly 2 '=', just trim the line
          let updatedLine = line.slice(2).trim();
          updatedLines.push(updatedLine); // Add the updated line
          continue;
        }
      }

      // Push other lines unchanged
      updatedLines.push(line);
    }

    // Join the updated lines and write back to the file
    const updatedContent = updatedLines.join("\n");
    fs.writeFile(filePath, updatedContent, "utf8", (err) => {
      if (err) {
        console.error(`Error writing file: ${err}`);
      }
    });
  });
};

// Get the file name from command line arguments
const fileName = process.argv[2]; // The file name should be the second argument
if (!fileName) {
  console.error("Please provide the AsciiDoc file name as an argument.");
  process.exit(1);
}

// Specify the path to the AsciiDoc file
const filePath = path.join(__dirname, fileName); // Use the provided file name
//console.log(`Processing ${fileName}...`);
updateAsciiDoc(filePath);
